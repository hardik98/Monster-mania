{"version":3,"sources":["component/search-bar/search-bar.component.js","component/card/card.component.js","component/card-list/card-list.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Searchbar","placeholder","handleChange","className","type","onChange","Card","props","alt","monster","name","src","email","CardList","monsters","map","AppComponent","event","console","info","setState","searchField","target","value","changeText","title","state","filtered","fetch","then","res","json","user","catch","err","log","this","filterdMonsters","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qUAaeA,G,YAVG,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aAC7B,OACW,2BAAOC,UAAU,SACVC,KAAK,OACLH,YAAaA,EACbI,SAAUH,MCMjBI,G,MAVF,SAACC,GACV,OACI,yBAAKJ,UAAU,kBACd,yBAAMK,IAAKD,EAAME,QAAQC,KAAMC,IAAG,+BAA2BJ,EAAME,QAAQC,KAAzC,mBAClC,gCAAMH,EAAME,QAAQC,KAApB,KACA,+BAAKH,EAAME,QAAQG,MAAnB,QCUMC,G,MAdE,SAACN,GAChB,OACE,yBAAKJ,UAAU,aACZI,EAAMO,SAASC,KAAI,SAAAN,GAAO,OAEzB,kBAAC,EAAD,CAAMA,QAASA,UCiERO,E,YAnEb,aAAe,IAAD,8BACX,+CAiBFd,aAAc,SAACe,GACbC,QAAQC,KAAK,eAAb,gBACE,EAAKC,SAAS,CAACC,YAAaJ,EAAMK,OAAOC,SApBhC,EAwBbC,WAAa,WACV,EAAKJ,SAAS,CAACK,MAAO,oBAtBvB,EAAKC,MAAQ,CACXZ,SAAU,GACVa,SAAU,GACVN,YAAc,IANL,E,iFAWQ,IAAD,OAClBO,MAAM,8CACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAI,OAAI,EAAKZ,SAAS,CAACN,SAAUkB,EAAML,SAAUK,OACtDC,OAAM,SAAAC,GAAG,OAAIhB,QAAQiB,IAAI,QAASD,Q,+BAa5B,IAAD,EAC2BE,KAAKV,MAArBL,GADX,EACCP,SADD,EACWO,aACZgB,EAAkBD,KAAKV,MAAMZ,SAASwB,QAAO,SAAA7B,GAC/C,OAAOA,EAAQC,KAAK6B,cAAcC,SAASnB,EAAYkB,kBAE3D,OACE,yBAAKpC,UAAU,OACb,gDACA,6BACC,kBAAC,EAAD,CAAWF,YAAY,iBAAiBC,aAAckC,KAAKlC,eAC3D,kBAAC,EAAD,CAAUY,SAAUuB,S,GAzCDI,aCORC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAAkBC,SAASC,eAAe,SD4HpD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,MAAK,SAAAyB,GACjCA,EAAaC,kB","file":"static/js/main.1a917d00.chunk.js","sourcesContent":["import React from 'react';\nimport './search-bar.component.css';\n\nconst Searchbar = ({placeholder, handleChange}) => {\n    return (\n               <input className=\"search\"\n                      type=\"text\"\n                      placeholder={placeholder}\n                      onChange={handleChange}/>\n\n    )\n}\n\nexport default Searchbar;","import React from 'react';\nimport './card.component.css';\n\n\nconst Card = (props) => {\n    return (\n        <div className='card-container'> \n         <img  alt={props.monster.name} src ={`https://robohash.org/${props.monster.name}?size=180x180`} />\n         <h2> {props.monster.name} </h2>\n         <p> {props.monster.email} </p>       \n        </div>\n    )\n}\n\nexport default Card;","import React from 'react';\nimport Card from '../card/card.component';\n\nimport './card-list.component.css';\n\nconst CardList = (props) => {\n  return (\n    <div className=\"card-list\">\n      {props.monsters.map(monster => (\n        \n        <Card monster={monster} />\n      ))\n      }\n    </div>\n  )\n}\n\n\n\nexport default CardList;","import React, { Component } from 'react';\nimport './App.css';\nimport Searchbar from './component/search-bar/search-bar.component';\n\nimport CardList from './component/card-list/card-list.component'\n class AppComponent extends Component {  \n\n  robot;\n  constructor() {\n     super();\n\n     this.state = {\n       monsters: [],\n       filtered: [],\n       searchField:  ''\n     }\n\n   }\n\n   componentDidMount() {\n     fetch('https://jsonplaceholder.typicode.com/users')\n     .then(res => res.json())\n     .then(user => this.setState({monsters: user, filtered: user}))\n     .catch(err => console.log(\"error\", err))\n   }\n\n   handleChange =(event) => {\n     console.info('what is this', this);\n       this.setState({searchField: event.target.value})\n      // this.setState({searchField: evt});\n   }\n\n   changeText = () => {\n      this.setState({title: 'changed titile'});\n   }\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filterdMonsters = this.state.monsters.filter(monster => {\n        return monster.name.toLowerCase().includes(searchField.toLowerCase());\n    })\n    return (\n      <div className=\"App\">\n        <h1> Monsters Mania </h1>\n        <br/>  \n         <Searchbar placeholder=\"Search Monster\" handleChange={this.handleChange}/>\n         <CardList monsters={filterdMonsters}/> \n      </div>\n    ); \n    }\n  \n}\n \n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\nexport default AppComponent;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport AppCo from './App';\nimport AppComponent from './App'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<AppComponent />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}